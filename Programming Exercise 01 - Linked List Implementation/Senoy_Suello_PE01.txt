#include <stdio.h>
#include <stdlib.h>

// Define the structure for a Node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to add an item to the linked list
void addItem(struct Node** head_ref) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    if (new_node == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }

    printf("Please enter the item to be added: ");
    scanf("%d", &new_node->data);

    // Menu to choose where to add the item in the list
    printf("Where to add the item?\n");
    printf("[1] Start of the list\n");
    printf("[2] End of the list\n");
    printf("[3] Specific position\n");
    printf("[0] Cancel\n");
    printf("Enter choice: ");

    int choice;
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            // Add item at the start of the list
            new_node->next = *head_ref;
            *head_ref = new_node;
            break;
        case 2:
            // Add item at the end of the list
            new_node->next = NULL;
            if (*head_ref == NULL) {
                *head_ref = new_node;
            } else {
                struct Node* last = *head_ref;
                while (last->next != NULL) {
                    last = last->next;
                }
                last->next = new_node;
            }
            break;
        case 3: {
            // Add item at a specific position in the list
            int position;
            printf("Enter the position to add the item: ");
            scanf("%d", &position);
            if (position <= 0) {
                printf("Invalid position!\n");
                free(new_node);
                return;
            }
            if (position == 1) {
                new_node->next = *head_ref;
                *head_ref = new_node;
                return;
            }
            struct Node* current = *head_ref;
            int count = 1;
            while (count < position - 1 && current != NULL) {
                current = current->next;
                count++;
            }
            if (current == NULL) {
                printf("Invalid position!\n");
                free(new_node);
                return;
            }
            new_node->next = current->next;
            current->next = new_node;
            break;
        }
        default:
            printf("Operation cancelled\n");
            free(new_node);
    }
}

// Function to delete an item from the linked list
void deleteItem(struct Node** head_ref) {
    if (*head_ref == NULL) {
        printf("The list contains no such element\n");
        return;
    }

    int itemToDelete;
    printf("Please enter the item to be deleted: ");
    scanf("%d", &itemToDelete);

    struct Node* temp = *head_ref, *prev = NULL;
    while (temp != NULL && temp->data != itemToDelete) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("The list contains no such element\n");
        return;
    }

    if (prev == NULL) {
        *head_ref = temp->next;
    } else {
        prev->next = temp->next;
    }

    printf("The element '%d' has been deleted\n", itemToDelete);
    free(temp);
}

// Function to display the content of the linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty\n");
        return;
    }

    printf("List content:\n");
    int position = 1;
    while (head != NULL) {
        printf("%d. %d\n", position++, head->data);
        head = head->next;
    }
}

// Function to delete the entire linked list
void deleteList(struct Node** head_ref) {
    struct Node* current = *head_ref;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    *head_ref = NULL;
    printf("The list has been emptied!\n");
}

// Main function
int main() {
    struct Node* head = NULL;

    while (1) {
        // Display the menu options
        printf("\nList MENU\n");
        printf("[1] Add Item\n");
        printf("[2] Delete Item\n");
        printf("[3] Display List\n");
        printf("[4] Delete List\n");
        printf("[0] Exit Program\n");
        printf("Enter choice: ");

        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addItem(&head); // Call the addItem function
                break;
            case 2:
                deleteItem(&head); // Call the deleteItem function
                break;
            case 3:
                displayList(head); // Call the displayList function
                break;
            case 4:
                deleteList(&head); // Call the deleteList function
                break;
            case 0:
                printf("Exiting program. Goodbye!\n");
                return 0; // Exit the program
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
